{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["t","i","push","App","props","handleClose","setState","show","handleOpen","state","Fragment","fluid","variant","onClick","this","onHide","Header","closeButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAaA,I,wJAFIA,G,oCAAI,IAECC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAEE,KAAKD,GACP,E,IAiDaE,E,YA7Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,YAAc,WACZ,EAAKC,SAAS,CAAEC,MAAM,KARL,EAUnBC,WAAa,WACX,EAAKF,SAAS,CAAEC,MAAM,KATtB,EAAKE,MAAQ,CACXF,MAAM,GAHS,E,sEAcjB,OACE,kBAAC,IAAMG,SAAP,KACE,kBAAC,IAAD,CAAeC,OAAK,GAClB,kBAAC,IAAD,CAAYC,QAAQ,UAAUC,QAASC,KAAKN,YAA5C,iBAIF,kBAAC,IAAD,CAAWD,KAAMO,KAAKL,MAAMF,KAAMQ,OAAQD,KAAKT,aAC7C,kBAAC,IAAD,KACE,kBAAC,IAAUW,OAAX,CAAkBC,aAAW,GAC3B,4BACE,kBAAC,IAAD,gBAGJ,kBAAC,IAAD,2FAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYJ,QAASC,KAAKT,aAA1B,SACA,kBAAC,IAAD,CAAYO,QAAQ,UAAUC,QAASC,KAAKT,aAA5C,gB,GAnCIa,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.172e7bea.chunk.js","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\nimport * as All from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as Fa from \"@fortawesome/free-solid-svg-icons\";\nimport * as Af from \"@fortawesome/fontawesome-svg-core\";\nimport \"./App.css\";\nimport \"logo.svg\";\nimport { all } from \"q\";\nimport DropdownItem from \"react-bootstrap/DropdownItem\";\nimport { realpathSync } from \"fs\";\nvar t = [];\nlet p = 0;\nfor (let i = 1; i < 100; ++i) {\n  t.push(i);\n  ++p;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false\n    };\n  }\n\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n  handleOpen = () => {\n    this.setState({ show: true });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <All.Container fluid>\n          <All.Button variant=\"primary\" onClick={this.handleOpen}>\n            Launch modal\n          </All.Button>\n        </All.Container>\n        <All.Modal show={this.state.show} onHide={this.handleClose}>\n          <All.ModalDialog>\n            <All.Modal.Header closeButton>\n              <h4>\n                <All.ModalTitle>Title</All.ModalTitle>\n              </h4>\n            </All.Modal.Header>\n            <All.ModalBody>\n              It is possible for us to provide you with a way to get better at\n              what you do&hellip;\n            </All.ModalBody>\n            <All.ModalFooter>\n              <All.Button onClick={this.handleClose}>Close</All.Button>\n              <All.Button variant=\"primary\" onClick={this.handleClose}>\n                Save\n              </All.Button>\n            </All.ModalFooter>\n          </All.ModalDialog>\n        </All.Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./tutorial.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}